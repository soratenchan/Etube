function noop() { }
const identity = x => x;
function assign(tar, src) {
    // @ts-ignore
    for (const k in src)
        tar[k] = src[k];
    return tar;
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}
function create_slot(definition, ctx, $$scope, fn) {
    if (definition) {
        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
        return definition[0](slot_ctx);
    }
}
function get_slot_context(definition, ctx, $$scope, fn) {
    return definition[1] && fn
        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
        : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
    if (definition[2] && fn) {
        const lets = definition[2](fn(dirty));
        if ($$scope.dirty === undefined) {
            return lets;
        }
        if (typeof lets === 'object') {
            const merged = [];
            const len = Math.max($$scope.dirty.length, lets.length);
            for (let i = 0; i < len; i += 1) {
                merged[i] = $$scope.dirty[i] | lets[i];
            }
            return merged;
        }
        return $$scope.dirty | lets;
    }
    return $$scope.dirty;
}
function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
    if (slot_changes) {
        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
        slot.p(slot_context, slot_changes);
    }
}
function action_destroyer(action_result) {
    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}

const is_client = typeof window !== 'undefined';
let now = is_client
    ? () => window.performance.now()
    : () => Date.now();
let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

const tasks = new Set();
function run_tasks(now) {
    tasks.forEach(task => {
        if (!task.c(now)) {
            tasks.delete(task);
            task.f();
        }
    });
    if (tasks.size !== 0)
        raf(run_tasks);
}
/**
 * Creates a new task that runs on each raf frame
 * until it returns a falsy value or is aborted
 */
function loop(callback) {
    let task;
    if (tasks.size === 0)
        raf(run_tasks);
    return {
        promise: new Promise(fulfill => {
            tasks.add(task = { c: callback, f: fulfill });
        }),
        abort() {
            tasks.delete(task);
        }
    };
}

function append(target, node) {
    target.appendChild(node);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function element(name) {
    return document.createElement(name);
}
function svg_element(name) {
    return document.createElementNS('http://www.w3.org/2000/svg', name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function empty() {
    return text('');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_data(text, data) {
    data = '' + data;
    if (text.wholeText !== data)
        text.data = data;
}
function custom_event(type, detail) {
    const e = document.createEvent('CustomEvent');
    e.initCustomEvent(type, false, false, detail);
    return e;
}

const active_docs = new Set();
let active = 0;
// https://github.com/darkskyapp/string-hash/blob/master/index.js
function hash(str) {
    let hash = 5381;
    let i = str.length;
    while (i--)
        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
    return hash >>> 0;
}
function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
    const step = 16.666 / duration;
    let keyframes = '{\n';
    for (let p = 0; p <= 1; p += step) {
        const t = a + (b - a) * ease(p);
        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
    }
    const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
    const name = `__svelte_${hash(rule)}_${uid}`;
    const doc = node.ownerDocument;
    active_docs.add(doc);
    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);
    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});
    if (!current_rules[name]) {
        current_rules[name] = true;
        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
    }
    const animation = node.style.animation || '';
    node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;
    active += 1;
    return name;
}
function delete_rule(node, name) {
    const previous = (node.style.animation || '').split(', ');
    const next = previous.filter(name
        ? anim => anim.indexOf(name) < 0 // remove specific animation
        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
    );
    const deleted = previous.length - next.length;
    if (deleted) {
        node.style.animation = next.join(', ');
        active -= deleted;
        if (!active)
            clear_rules();
    }
}
function clear_rules() {
    raf(() => {
        if (active)
            return;
        active_docs.forEach(doc => {
            const stylesheet = doc.__svelte_stylesheet;
            let i = stylesheet.cssRules.length;
            while (i--)
                stylesheet.deleteRule(i);
            doc.__svelte_rules = {};
        });
        active_docs.clear();
    });
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error(`Function called outside component initialization`);
    return current_component;
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}
function createEventDispatcher() {
    const component = get_current_component();
    return (type, detail) => {
        const callbacks = component.$$.callbacks[type];
        if (callbacks) {
            // TODO are there situations where events could be dispatched
            // in a server (non-DOM) environment?
            const event = custom_event(type, detail);
            callbacks.slice().forEach(fn => {
                fn.call(component, event);
            });
        }
    };
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}

let promise;
function wait() {
    if (!promise) {
        promise = Promise.resolve();
        promise.then(() => {
            promise = null;
        });
    }
    return promise;
}
function dispatch(node, direction, kind) {
    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}
const null_transition = { duration: 0 };
function create_bidirectional_transition(node, fn, params, intro) {
    let config = fn(node, params);
    let t = intro ? 0 : 1;
    let running_program = null;
    let pending_program = null;
    let animation_name = null;
    function clear_animation() {
        if (animation_name)
            delete_rule(node, animation_name);
    }
    function init(program, duration) {
        const d = program.b - t;
        duration *= Math.abs(d);
        return {
            a: t,
            b: program.b,
            d,
            duration,
            start: program.start,
            end: program.start + duration,
            group: program.group
        };
    }
    function go(b) {
        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
        const program = {
            start: now() + delay,
            b
        };
        if (!b) {
            // @ts-ignore todo: improve typings
            program.group = outros;
            outros.r += 1;
        }
        if (running_program) {
            pending_program = program;
        }
        else {
            // if this is an intro, and there's a delay, we need to do
            // an initial tick and/or apply CSS animation immediately
            if (css) {
                clear_animation();
                animation_name = create_rule(node, t, b, duration, delay, easing, css);
            }
            if (b)
                tick(0, 1);
            running_program = init(program, duration);
            add_render_callback(() => dispatch(node, b, 'start'));
            loop(now => {
                if (pending_program && now > pending_program.start) {
                    running_program = init(pending_program, duration);
                    pending_program = null;
                    dispatch(node, running_program.b, 'start');
                    if (css) {
                        clear_animation();
                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
                    }
                }
                if (running_program) {
                    if (now >= running_program.end) {
                        tick(t = running_program.b, 1 - t);
                        dispatch(node, running_program.b, 'end');
                        if (!pending_program) {
                            // we're done
                            if (running_program.b) {
                                // intro — we can tidy up immediately
                                clear_animation();
                            }
                            else {
                                // outro — needs to be coordinated
                                if (!--running_program.group.r)
                                    run_all(running_program.group.c);
                            }
                        }
                        running_program = null;
                    }
                    else if (now >= running_program.start) {
                        const p = now - running_program.start;
                        t = running_program.a + running_program.d * easing(p / running_program.duration);
                        tick(t, 1 - t);
                    }
                }
                return !!(running_program || pending_program);
            });
        }
    }
    return {
        run(b) {
            if (is_function(config)) {
                wait().then(() => {
                    // @ts-ignore
                    config = config();
                    go(b);
                });
            }
            else {
                go(b);
            }
        },
        end() {
            clear_animation();
            running_program = pending_program = null;
        }
    };
}
function create_component(block) {
    block && block.c();
}
function mount_component(component, target, anchor) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    // onMount happens before the initial afterUpdate
    add_render_callback(() => {
        const new_on_destroy = on_mount.map(run).filter(is_function);
        if (on_destroy) {
            on_destroy.push(...new_on_destroy);
        }
        else {
            // Edge case - component was destroyed immediately,
            // most likely as a result of a binding initialising
            run_all(new_on_destroy);
        }
        component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const prop_values = options.props || {};
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : []),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false
    };
    let ready = false;
    $$.ctx = instance
        ? instance(component, prop_values, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if (!$$.skip_bound && $$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor);
        flush();
    }
    set_current_component(parent_component);
}
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}

function fade(node, { delay = 0, duration = 400, easing = identity }) {
    const o = +getComputedStyle(node).opacity;
    return {
        delay,
        duration,
        easing,
        css: t => `opacity: ${t * o}`
    };
}

/* node_modules/@fouita/tooltip/src/Tooltip.svelte generated by Svelte v3.25.0 */

function add_css() {
	var style = element("style");
	style.id = "svelte-j3362d-style";
	style.textContent = ".top-100.svelte-j3362d{top:100%}.bottom-100.svelte-j3362d{bottom:100%}.left-100.svelte-j3362d{left:100%}.right-100.svelte-j3362d{right:100%}";
	append(document.head, style);
}

// (88:0) {#if show}
function create_if_block(ctx) {
	let div1;
	let div0;
	let t;
	let svg;
	let polygon;
	let polygon_points_value;
	let svg_class_value;
	let div1_class_value;
	let mposition_action;
	let div1_transition;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[15].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[14], null);
	const default_slot_or_fallback = default_slot || fallback_block(ctx);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			t = space();
			svg = svg_element("svg");
			polygon = svg_element("polygon");
			attr(polygon, "class", "fill-current");
			attr(polygon, "points", polygon_points_value = /*points*/ ctx[10][/*position*/ ctx[0]]);
			attr(svg, "class", svg_class_value = "absolute text-" + /*color*/ ctx[1] + "\r\n        " + /*cursor_class*/ ctx[7] + " h-2 " + /*pointer_class*/ ctx[6] + "\r\n        " + /*position*/ ctx[0] + "-100" + " svelte-j3362d");
			attr(svg, "x", "0px");
			attr(svg, "y", "0px");
			attr(svg, "viewBox", "0 0 255 255");
			attr(svg, "xml:space", "preserve");
			attr(div0, "class", "relative shadow-md");
			attr(div1, "class", div1_class_value = "absolute z-40 " + /*lhidden*/ ctx[9] + "\r\n    " + /*inv_position*/ ctx[12][/*position*/ ctx[0]] + "-100 " + /*elm_class*/ ctx[8] + "\r\n    " + /*pointer_class*/ ctx[6] + "\r\n    " + (/*w*/ ctx[5] ? "w-" + /*w*/ ctx[5] : "min-w-full") + " svelte-j3362d");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(div0, null);
			}

			append(div0, t);
			append(div0, svg);
			append(svg, polygon);
			current = true;

			if (!mounted) {
				dispose = action_destroyer(mposition_action = /*mposition*/ ctx[11].call(null, div1));
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16384) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[14], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*color, text_color, text*/ 14) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (!current || dirty & /*position*/ 1 && polygon_points_value !== (polygon_points_value = /*points*/ ctx[10][/*position*/ ctx[0]])) {
				attr(polygon, "points", polygon_points_value);
			}

			if (!current || dirty & /*color, cursor_class, pointer_class, position*/ 195 && svg_class_value !== (svg_class_value = "absolute text-" + /*color*/ ctx[1] + "\r\n        " + /*cursor_class*/ ctx[7] + " h-2 " + /*pointer_class*/ ctx[6] + "\r\n        " + /*position*/ ctx[0] + "-100" + " svelte-j3362d")) {
				attr(svg, "class", svg_class_value);
			}

			if (!current || dirty & /*lhidden, position, elm_class, pointer_class, w*/ 865 && div1_class_value !== (div1_class_value = "absolute z-40 " + /*lhidden*/ ctx[9] + "\r\n    " + /*inv_position*/ ctx[12][/*position*/ ctx[0]] + "-100 " + /*elm_class*/ ctx[8] + "\r\n    " + /*pointer_class*/ ctx[6] + "\r\n    " + (/*w*/ ctx[5] ? "w-" + /*w*/ ctx[5] : "min-w-full") + " svelte-j3362d")) {
				attr(div1, "class", div1_class_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);

			add_render_callback(() => {
				if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, { duration: 100 }, true);
				div1_transition.run(1);
			});

			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, { duration: 100 }, false);
			div1_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			if (detaching && div1_transition) div1_transition.end();
			mounted = false;
			dispose();
		}
	};
}

// (97:12)           
function fallback_block(ctx) {
	let div;
	let t;
	let div_class_value;

	return {
		c() {
			div = element("div");
			t = text(/*text*/ ctx[3]);
			attr(div, "class", div_class_value = "bg-" + /*color*/ ctx[1] + " text-" + /*text_color*/ ctx[2] + " truncate text-xs rounded py-1 px-4" + " svelte-j3362d");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*text*/ 8) set_data(t, /*text*/ ctx[3]);

			if (dirty & /*color, text_color*/ 6 && div_class_value !== (div_class_value = "bg-" + /*color*/ ctx[1] + " text-" + /*text_color*/ ctx[2] + " truncate text-xs rounded py-1 px-4" + " svelte-j3362d")) {
				attr(div, "class", div_class_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*show*/ ctx[4] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*show*/ ctx[4]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*show*/ 16) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { position = "top" } = $$props; // top, left, bottom, right
	let { pointer = "middle" } = $$props; //start, middle , end
	let { color = "black" } = $$props;
	let { text_color = "white" } = $$props;
	let { text = "" } = $$props;
	let { show = true } = $$props;
	let { w = null } = $$props;

	let points = {
		top: "0,0 127.5,127.5 255,0",
		right: "255,0 127.5,127.5 255,255",
		left: "0,0 127.5,127.5 0,255",
		bottom: "0,255 127.5,127.5 255,255"
	};

	let pointer_class = "left-0";
	let cursor_class = "";
	let elm_class = "";
	let lhidden = "opacity-0";
	let current_node = null;

	function mposition(node) {
		$$invalidate(16, current_node = node);
		let m = 0;

		if (position == "top" || position == "bottom") {
			if (pointer == "middle") {
				m = node.parentNode.clientWidth / 2 - node.clientWidth / 2;
				node.style.marginLeft = `${m}px`;
				$$invalidate(7, cursor_class = "w-full");
			} else if (pointer == "start") {
				$$invalidate(6, pointer_class = "left-0");
				$$invalidate(7, cursor_class = "ml-2");
			} else if (pointer == "end") {
				$$invalidate(6, pointer_class = "right-0");
				$$invalidate(7, cursor_class = "mr-2");
			}

			$$invalidate(8, elm_class = position == "top" ? "mb-2" : "mt-2");
		} else {
			if (pointer == "middle") {
				m = node.parentNode.clientHeight / 2 - node.clientHeight / 2;
				node.style.marginTop = `${m}px`;
				$$invalidate(7, cursor_class = "h-full w-2");
				$$invalidate(6, pointer_class = "top-0");
			} else if (pointer == "start") {
				$$invalidate(6, pointer_class = "top-0");
				$$invalidate(7, cursor_class = "mt-2");
			} else if (pointer == "end") {
				$$invalidate(7, cursor_class = "mb-2");
				$$invalidate(6, pointer_class = "bottom-0");
			}

			$$invalidate(8, elm_class = position == "left" ? "mr-2" : "ml-2");
		}

		$$invalidate(9, lhidden = "opacity-100");
	}

	let inv_position = {
		top: "bottom",
		bottom: "top",
		left: "right",
		right: "left"
	};

	let otext = null;

	$$self.$$set = $$props => {
		if ("position" in $$props) $$invalidate(0, position = $$props.position);
		if ("pointer" in $$props) $$invalidate(13, pointer = $$props.pointer);
		if ("color" in $$props) $$invalidate(1, color = $$props.color);
		if ("text_color" in $$props) $$invalidate(2, text_color = $$props.text_color);
		if ("text" in $$props) $$invalidate(3, text = $$props.text);
		if ("show" in $$props) $$invalidate(4, show = $$props.show);
		if ("w" in $$props) $$invalidate(5, w = $$props.w);
		if ("$$scope" in $$props) $$invalidate(14, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*text, otext, current_node*/ 196616) {
			 if (text && otext != text && current_node) {
				$$invalidate(17, otext = text);
				setTimeout(() => mposition(current_node));
			}
		}
	};

	return [
		position,
		color,
		text_color,
		text,
		show,
		w,
		pointer_class,
		cursor_class,
		elm_class,
		lhidden,
		points,
		mposition,
		inv_position,
		pointer,
		$$scope,
		slots
	];
}

class Tooltip extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-j3362d-style")) add_css();

		init(this, options, instance, create_fragment, safe_not_equal, {
			position: 0,
			pointer: 13,
			color: 1,
			text_color: 2,
			text: 3,
			show: 4,
			w: 5
		});
	}
}

/* src/Slider.svelte generated by Svelte v3.25.0 */

function create_if_block$1(ctx) {
	let div1;
	let div0;
	let tooltip_1;
	let setPointer2_action;
	let current;
	let mounted;
	let dispose;

	tooltip_1 = new Tooltip({
			props: {
				text: /*indLabel*/ ctx[6][1],
				show: /*display_tooltip2*/ ctx[11]
			}
		});

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			create_component(tooltip_1.$$.fragment);
			attr(div0, "key", "k8");
			attr(div0, "class", "relative -mt-2 w-1");
			attr(div1, "key", "k7");
			attr(div1, "class", "absolute h-4 -mt-1 flex items-center justify-center w-4\r\n          rounded-full bg-white shadow border border-gray-300 -ml-2 top-0\r\n          cursor-pointer");
			attr(div1, "unselectable", "on");
			attr(div1, "onselectstart", "return false;");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			mount_component(tooltip_1, div0, null);
			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(setPointer2_action = /*setPointer2*/ ctx[15].call(null, div1)),
					listen(div1, "touchstart", /*touchstart_handler_1*/ ctx[27], { passive: true }),
					listen(div1, "mousedown", /*mousedown_handler_1*/ ctx[28]),
					listen(div1, "mouseenter", /*mouseenter_handler_1*/ ctx[29]),
					listen(div1, "mouseleave", /*mouseleave_handler_1*/ ctx[30])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			const tooltip_1_changes = {};
			if (dirty[0] & /*indLabel*/ 64) tooltip_1_changes.text = /*indLabel*/ ctx[6][1];
			if (dirty[0] & /*display_tooltip2*/ 2048) tooltip_1_changes.show = /*display_tooltip2*/ ctx[11];
			tooltip_1.$set(tooltip_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tooltip_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tooltip_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(tooltip_1);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$1(ctx) {
	let div7;
	let div6;
	let div5;
	let div0;
	let div0_class_value;
	let progressBar_action;
	let t0;
	let div2;
	let div1;
	let tooltip_1;
	let setPointer_action;
	let t1;
	let show_if = Array.isArray(/*value*/ ctx[0]);
	let t2;
	let div3;
	let t3;
	let t4;
	let div4;
	let t5;
	let setContainer_action;
	let elmPosition_action;
	let current;
	let mounted;
	let dispose;

	tooltip_1 = new Tooltip({
			props: {
				text: Array.isArray(/*indLabel*/ ctx[6]) && /*indLabel*/ ctx[6][0] || /*indLabel*/ ctx[6],
				show: /*display_tooltip1*/ ctx[10]
			}
		});

	let if_block = show_if && create_if_block$1(ctx);

	return {
		c() {
			div7 = element("div");
			div6 = element("div");
			div5 = element("div");
			div0 = element("div");
			t0 = space();
			div2 = element("div");
			div1 = element("div");
			create_component(tooltip_1.$$.fragment);
			t1 = space();
			if (if_block) if_block.c();
			t2 = space();
			div3 = element("div");
			t3 = text(/*minLabel*/ ctx[1]);
			t4 = space();
			div4 = element("div");
			t5 = text(/*maxLabel*/ ctx[2]);
			attr(div0, "key", "k4");
			attr(div0, "class", div0_class_value = "absolute h-1 rounded-full bg-" + /*color*/ ctx[4] + " w-0");
			attr(div1, "key", "k6");
			attr(div1, "class", "relative -mt-2 w-1");
			attr(div2, "key", "k5");
			attr(div2, "class", "absolute h-4 -mt-1 flex items-center justify-center w-4\r\n        rounded-full bg-white shadow border border-gray-300 -ml-2 top-0\r\n        cursor-pointer");
			attr(div2, "unselectable", "on");
			attr(div2, "onselectstart", "return false;");
			attr(div3, "key", "k9");
			attr(div3, "class", "absolute text-gray-800 -ml-1 bottom-0 left-0 -mb-6");
			attr(div4, "key", "k10");
			attr(div4, "class", "absolute text-gray-800 -mr-1 bottom-0 right-0 -mb-6");
			attr(div5, "key", "k3");
			attr(div5, "class", "h-1 -mt-px bg-gray-300 rounded-full");
			attr(div6, "key", "k2");
			attr(div6, "class", "py-1 relative min-w-full");
			attr(div7, "key", "k1");
			attr(div7, "class", /*klass*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div7, anchor);
			append(div7, div6);
			append(div6, div5);
			append(div5, div0);
			append(div5, t0);
			append(div5, div2);
			append(div2, div1);
			mount_component(tooltip_1, div1, null);
			append(div5, t1);
			if (if_block) if_block.m(div5, null);
			append(div5, t2);
			append(div5, div3);
			append(div3, t3);
			append(div5, t4);
			append(div5, div4);
			append(div4, t5);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window, "mousemove", /*movePointer*/ ctx[12]),
					listen(window, "touchmove", /*movePointer*/ ctx[12]),
					listen(window, "mouseup", /*mouseUp*/ ctx[18]),
					listen(window, "touchend", /*mouseUp*/ ctx[18]),
					listen(window, "resize", /*resizeWindow*/ ctx[19]),
					action_destroyer(progressBar_action = /*progressBar*/ ctx[17].call(null, div0)),
					action_destroyer(setPointer_action = /*setPointer*/ ctx[14].call(null, div2)),
					listen(div2, "touchstart", /*touchstart_handler*/ ctx[23], { passive: true }),
					listen(div2, "mousedown", /*mousedown_handler*/ ctx[24]),
					listen(div2, "mouseenter", /*mouseenter_handler*/ ctx[25]),
					listen(div2, "mouseleave", /*mouseleave_handler*/ ctx[26]),
					action_destroyer(setContainer_action = /*setContainer*/ ctx[16].call(null, div5)),
					action_destroyer(elmPosition_action = /*elmPosition*/ ctx[13].call(null, div6))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*color*/ 16 && div0_class_value !== (div0_class_value = "absolute h-1 rounded-full bg-" + /*color*/ ctx[4] + " w-0")) {
				attr(div0, "class", div0_class_value);
			}

			const tooltip_1_changes = {};
			if (dirty[0] & /*indLabel*/ 64) tooltip_1_changes.text = Array.isArray(/*indLabel*/ ctx[6]) && /*indLabel*/ ctx[6][0] || /*indLabel*/ ctx[6];
			if (dirty[0] & /*display_tooltip1*/ 1024) tooltip_1_changes.show = /*display_tooltip1*/ ctx[10];
			tooltip_1.$set(tooltip_1_changes);
			if (dirty[0] & /*value*/ 1) show_if = Array.isArray(/*value*/ ctx[0]);

			if (show_if) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*value*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div5, t2);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty[0] & /*minLabel*/ 2) set_data(t3, /*minLabel*/ ctx[1]);
			if (!current || dirty[0] & /*maxLabel*/ 4) set_data(t5, /*maxLabel*/ ctx[2]);

			if (!current || dirty[0] & /*klass*/ 8) {
				attr(div7, "class", /*klass*/ ctx[3]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(tooltip_1.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(tooltip_1.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div7);
			destroy_component(tooltip_1);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let { class: klass = "" } = $$props;
	const dispatch = createEventDispatcher();
	let { min = 0 } = $$props;
	let { max = 100 } = $$props;
	let { value = [25, 64] } = $$props;
	let { minLabel = String(min) } = $$props;
	let { maxLabel = String(max) } = $$props;
	let { valueLabel = null } = $$props;
	let { color = "indigo-600" } = $$props;
	let { tooltip = false } = $$props;
	let indLabel = valueLabel;
	let current_pointer = null;

	function setValue(val) {
		if (Array.isArray(value)) {
			$$invalidate(0, value[current_pointer == pointer ? 0 : 1] = val, value);
		} else {
			$$invalidate(0, value = val);
		}

		dispatch("change", value);
	}

	function movePointer(e) {
		if (!current_pointer) return false;
		let cx = e.clientX || e.touches[0].clientX;
		let diff = cx - elm_x; // calculate percentage
		let per = diff * 100 / cont_width;
		per = per < 0 ? 0 : per > 100 ? 100 : per;
		setValue(parseInt(per * (max - min) / 100) + min);
	}

	let elm_x = null;
	let pointer = null;
	let pointer2 = null;
	let cont_width = null;
	let progress_bar = null;
	let display_tooltip1 = false;
	let display_tooltip2 = false;

	function elmPosition(node) {
		elm_x = node.offsetLeft;
	}

	function setPointer(node) {
		$$invalidate(8, pointer = node);
	}

	function setPointer2(node) {
		$$invalidate(9, pointer2 = node);
	}

	let container;

	function setContainer(node) {
		container = node;
		cont_width = node.clientWidth;
	}

	function progressBar(node) {
		$$invalidate(33, progress_bar = node);
	}

	function mouseUp() {
		$$invalidate(7, current_pointer = null);
		$$invalidate(10, display_tooltip1 = tooltip == "hover" ? false : tooltip);
		$$invalidate(11, display_tooltip2 = display_tooltip1);
	}

	onMount(() => {
		$$invalidate(1, minLabel = minLabel.replace("%d", min));
		$$invalidate(2, maxLabel = maxLabel.replace("%d", max));
	});

	function resizeWindow() {
		cont_width = container.clientWidth;
	}

	const touchstart_handler = () => $$invalidate(7, current_pointer = pointer);
	const mousedown_handler = () => $$invalidate(7, current_pointer = pointer);
	const mouseenter_handler = () => $$invalidate(10, display_tooltip1 = tooltip || tooltip == "hover");
	const mouseleave_handler = () => $$invalidate(10, display_tooltip1 = !!tooltip && !!current_pointer || (tooltip == "hover" ? false : tooltip));
	const touchstart_handler_1 = () => $$invalidate(7, current_pointer = pointer2);
	const mousedown_handler_1 = () => $$invalidate(7, current_pointer = pointer2);
	const mouseenter_handler_1 = () => $$invalidate(11, display_tooltip2 = tooltip || tooltip == "hover");
	const mouseleave_handler_1 = () => $$invalidate(11, display_tooltip2 = !!tooltip && !!current_pointer || (tooltip == "hover" ? false : tooltip));

	$$self.$$set = $$props => {
		if ("class" in $$props) $$invalidate(3, klass = $$props.class);
		if ("min" in $$props) $$invalidate(20, min = $$props.min);
		if ("max" in $$props) $$invalidate(21, max = $$props.max);
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
		if ("minLabel" in $$props) $$invalidate(1, minLabel = $$props.minLabel);
		if ("maxLabel" in $$props) $$invalidate(2, maxLabel = $$props.maxLabel);
		if ("valueLabel" in $$props) $$invalidate(22, valueLabel = $$props.valueLabel);
		if ("color" in $$props) $$invalidate(4, color = $$props.color);
		if ("tooltip" in $$props) $$invalidate(5, tooltip = $$props.tooltip);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*pointer, value, min, max*/ 3145985 | $$self.$$.dirty[1] & /*progress_bar*/ 4) {
			 if (progress_bar && pointer) {
				if (Array.isArray(value)) {
					$$invalidate(0, value[0] = value[0] > min ? value[0] : min, value);
					$$invalidate(0, value[1] = value[1] < max ? value[1] : max, value);
					let per1 = (value[0] - min) * 100 / (max - min);
					$$invalidate(8, pointer.style.left = `${per1}%`, pointer);
					let per2 = (value[1] - min) * 100 / (max - min);
					$$invalidate(9, pointer2.style.left = `${per2}%`, pointer2);
					$$invalidate(33, progress_bar.style.width = `${per2 - per1}%`, progress_bar);
					$$invalidate(33, progress_bar.style.left = `${per1}%`, progress_bar);
				} else {
					$$invalidate(0, value = value > min ? value : min);
					$$invalidate(0, value = value < max ? value : max);
					let per = (value - min) * 100 / (max - min);
					$$invalidate(8, pointer.style.left = `${per}%`, pointer);
					$$invalidate(33, progress_bar.style.width = `${per}%`, progress_bar);
				}
			}
		}

		if ($$self.$$.dirty[0] & /*valueLabel, value*/ 4194305) {
			 if (valueLabel !== null) {
				if (Array.isArray(valueLabel)) {
					if (valueLabel.find(vl => !~String(vl).indexOf("%d"))) {
						$$invalidate(6, indLabel = valueLabel.map(v => String(v)));
					} else {
						$$invalidate(6, indLabel = valueLabel.map((lab, i) => lab.replace("%d", value[i])));
					}
				} else {
					if (!~valueLabel.indexOf("%d")) {
						$$invalidate(6, indLabel = String(valueLabel));
					} else {
						$$invalidate(6, indLabel = valueLabel.replace("%d", value));
					}
				}
			}
		}

		if ($$self.$$.dirty[0] & /*valueLabel, value*/ 4194305) {
			 if (valueLabel === null) {
				if (Array.isArray(value)) {
					$$invalidate(6, indLabel = value.map(v => String(v)));
				} else {
					$$invalidate(6, indLabel = String(value));
				}
			}
		}

		if ($$self.$$.dirty[0] & /*tooltip*/ 32) {
			 if (tooltip == true) {
				$$invalidate(10, display_tooltip1 = true);
				$$invalidate(11, display_tooltip2 = true);
			}
		}
	};

	return [
		value,
		minLabel,
		maxLabel,
		klass,
		color,
		tooltip,
		indLabel,
		current_pointer,
		pointer,
		pointer2,
		display_tooltip1,
		display_tooltip2,
		movePointer,
		elmPosition,
		setPointer,
		setPointer2,
		setContainer,
		progressBar,
		mouseUp,
		resizeWindow,
		min,
		max,
		valueLabel,
		touchstart_handler,
		mousedown_handler,
		mouseenter_handler,
		mouseleave_handler,
		touchstart_handler_1,
		mousedown_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1
	];
}

class Slider extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$1,
			create_fragment$1,
			safe_not_equal,
			{
				class: 3,
				min: 20,
				max: 21,
				value: 0,
				minLabel: 1,
				maxLabel: 2,
				valueLabel: 22,
				color: 4,
				tooltip: 5
			},
			[-1, -1]
		);
	}
}

export default Slider;
